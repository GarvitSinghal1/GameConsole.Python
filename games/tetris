#!/usr/bin/env python3
import os
import sys
import time
import random
import colorama
from colorama import Fore, Back, Style
import threading

# Platform-specific imports
if os.name == 'nt':
    import msvcrt
else:
    import select
    import tty
    import termios

# Initialize colorama
colorama.init(autoreset=True)

def clear_screen():
    """Clear the console screen."""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """Print the game header."""
    print(f"{Back.CYAN}{Fore.WHITE}╔═══════════════════════════════════════════════════════════════╗{Style.RESET_ALL}")
    print(f"{Back.CYAN}{Fore.WHITE}║                       TETRIS                                 ║{Style.RESET_ALL}")
    print(f"{Back.CYAN}{Fore.WHITE}╚═══════════════════════════════════════════════════════════════╝{Style.RESET_ALL}")
    print()

def is_key_pressed():
    """Check if a key has been pressed."""
    if os.name == 'nt':
        return msvcrt.kbhit()
    else:
        dr, dw, de = select.select([sys.stdin], [], [], 0)
        return dr != []

def get_key():
    """Get a single key press."""
    if os.name == 'nt':
        return msvcrt.getch().decode('utf-8').lower()
    else:
        old_settings = termios.tcgetattr(sys.stdin)
        try:
            tty.setcbreak(sys.stdin.fileno())
            key = sys.stdin.read(1)
            return key.lower()
        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)

# Define tetromino shapes and colors
SHAPES = {
    'I': [
        [1, 1, 1, 1]
    ],
    'J': [
        [1, 0, 0],
        [1, 1, 1]
    ],
    'L': [
        [0, 0, 1],
        [1, 1, 1]
    ],
    'O': [
        [1, 1],
        [1, 1]
    ],
    'S': [
        [0, 1, 1],
        [1, 1, 0]
    ],
    'T': [
        [0, 1, 0],
        [1, 1, 1]
    ],
    'Z': [
        [1, 1, 0],
        [0, 1, 1]
    ]
}

COLORS = {
    'I': Fore.CYAN,
    'J': Fore.BLUE,
    'L': Fore.YELLOW,
    'O': Fore.WHITE,
    'S': Fore.GREEN,
    'T': Fore.MAGENTA,
    'Z': Fore.RED
}

class Tetris:
    def __init__(self, width=10, height=20):
        """Initialize the Tetris game."""
        self.width = width
        self.height = height
        self.board = [[0 for _ in range(width)] for _ in range(height)]
        self.current_piece = None
        self.current_shape = None
        self.current_x = 0
        self.current_y = 0
        self.score = 0
        self.level = 1
        self.lines_cleared = 0
        self.game_over = False
        self.paused = False
        self.next_piece = self.get_random_shape()
    
    def get_random_shape(self):
        """Get a random tetromino shape."""
        return random.choice(list(SHAPES.keys()))
    
    def new_piece(self):
        """Create a new tetromino piece."""
        self.current_shape = self.next_piece
        self.next_piece = self.get_random_shape()
        self.current_piece = SHAPES[self.current_shape]
        
        # Start position (centered at top)
        self.current_x = self.width // 2 - len(self.current_piece[0]) // 2
        self.current_y = 0
        
        # Check if the new piece can be placed
        if not self.is_valid_position():
            self.game_over = True
    
    def rotate_piece(self):
        """Rotate the current piece clockwise."""
        # Save the original piece to restore if rotation is not valid
        original_piece = self.current_piece
        
        # Get dimensions
        rows = len(self.current_piece)
        cols = len(self.current_piece[0])
        
        # Create a new rotated piece
        rotated = [[0 for _ in range(rows)] for _ in range(cols)]
        
        # Fill the rotated piece
        for r in range(rows):
            for c in range(cols):
                rotated[c][rows - 1 - r] = self.current_piece[r][c]
        
        # Apply rotation if valid
        self.current_piece = rotated
        if not self.is_valid_position():
            self.current_piece = original_piece
    
    def is_valid_position(self, x_offset=0, y_offset=0):
        """Check if the current piece can be at the current position with offsets."""
        for y, row in enumerate(self.current_piece):
            for x, cell in enumerate(row):
                if cell:
                    board_x = self.current_x + x + x_offset
                    board_y = self.current_y + y + y_offset
                    
                    # Check if out of bounds
                    if (board_x < 0 or board_x >= self.width or 
                        board_y < 0 or board_y >= self.height):
                        return False
                    
                    # Check if collides with locked piece
                    if board_y >= 0 and self.board[board_y][board_x]:
                        return False
        
        return True
    
    def merge_piece(self):
        """Merge the current piece into the board."""
        for y, row in enumerate(self.current_piece):
            for x, cell in enumerate(row):
                if cell:
                    board_y = self.current_y + y
                    board_x = self.current_x + x
                    if 0 <= board_y < self.height and 0 <= board_x < self.width:
                        self.board[board_y][board_x] = self.current_shape
    
    def clear_lines(self):
        """Clear completed lines and return the number of lines cleared."""
        lines_to_clear = []
        
        # Find lines to clear
        for y in range(self.height):
            if all(self.board[y]):
                lines_to_clear.append(y)
        
        # Clear the lines
        for y in lines_to_clear:
            # Remove the line
            self.board.pop(y)
            # Add a new empty line at the top
            self.board.insert(0, [0 for _ in range(self.width)])
        
        # Update score and level
        if lines_to_clear:
            self.lines_cleared += len(lines_to_clear)
            # Calculate score: more lines = more points per line
            line_score = {1: 100, 2: 300, 3: 500, 4: 800}
            self.score += line_score.get(len(lines_to_clear), 100) * self.level
            
            # Update level (every 10 lines)
            self.level = (self.lines_cleared // 10) + 1
        
        return len(lines_to_clear)
    
    def move_left(self):
        """Move the current piece left if possible."""
        if self.is_valid_position(x_offset=-1):
            self.current_x -= 1
    
    def move_right(self):
        """Move the current piece right if possible."""
        if self.is_valid_position(x_offset=1):
            self.current_x += 1
    
    def move_down(self):
        """Move the current piece down if possible, else lock it."""
        if self.is_valid_position(y_offset=1):
            self.current_y += 1
            return True
        else:
            self.merge_piece()
            self.clear_lines()
            self.new_piece()
            return False
    
    def drop(self):
        """Drop the piece to the bottom instantly."""
        while self.move_down():
            pass
    
    def draw(self, show_ghost=True):
        """Draw the game board."""
        # Create a copy of the board for drawing
        board_copy = [row[:] for row in self.board]
        
        # Add ghost piece (preview of where the piece will land)
        if show_ghost and self.current_piece:
            ghost_y = self.current_y
            # Find the lowest valid position
            while self.is_valid_position(y_offset=ghost_y - self.current_y + 1):
                ghost_y += 1
            
            # Add ghost piece to the board copy
            for y, row in enumerate(self.current_piece):
                for x, cell in enumerate(row):
                    if cell:
                        board_y = ghost_y + y
                        board_x = self.current_x + x
                        if 0 <= board_y < self.height and 0 <= board_x < self.width:
                            if not board_copy[board_y][board_x]:  # Only if the cell is empty
                                board_copy[board_y][board_x] = 'ghost'
        
        # Add current piece to the board copy
        if self.current_piece:
            for y, row in enumerate(self.current_piece):
                for x, cell in enumerate(row):
                    if cell:
                        board_y = self.current_y + y
                        board_x = self.current_x + x
                        if 0 <= board_y < self.height and 0 <= board_x < self.width:
                            board_copy[board_y][board_x] = self.current_shape
        
        # Draw the next piece preview
        print(f"{Fore.CYAN}Next Piece:{Style.RESET_ALL}")
        next_shape = SHAPES[self.next_piece]
        next_color = COLORS[self.next_piece]
        for row in next_shape:
            print("  ", end="")
            for cell in row:
                if cell:
                    print(f"{next_color}■{Style.RESET_ALL}", end="")
                else:
                    print(" ", end="")
            print()
        print()
        
        # Draw score and level
        print(f"{Fore.YELLOW}Score: {self.score}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Level: {self.level}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Lines: {self.lines_cleared}{Style.RESET_ALL}")
        print()
        
        # Draw the board with a border
        print(f"{Fore.WHITE}╔{'═' * (self.width * 2)}╗{Style.RESET_ALL}")
        
        for row in board_copy:
            print(f"{Fore.WHITE}║{Style.RESET_ALL}", end="")
            for cell in row:
                if cell == 0:
                    print("  ", end="")
                elif cell == 'ghost':
                    print(f"{Fore.WHITE}□{Style.RESET_ALL} ", end="")
                else:
                    color = COLORS[cell]
                    print(f"{color}■{Style.RESET_ALL} ", end="")
            print(f"{Fore.WHITE}║{Style.RESET_ALL}")
        
        print(f"{Fore.WHITE}╚{'═' * (self.width * 2)}╝{Style.RESET_ALL}")
        print()
        
        # Game controls
        print(f"{Fore.CYAN}Controls:{Style.RESET_ALL}")
        print(f"{Fore.WHITE}[←] Move Left   [→] Move Right   [↓] Move Down{Style.RESET_ALL}")
        print(f"{Fore.WHITE}[↑] Rotate   [Space] Drop   [P] Pause   [Q] Quit{Style.RESET_ALL}")
        
        if self.paused:
            print(f"\n{Fore.YELLOW}PAUSED - Press P to continue{Style.RESET_ALL}")
        
        if self.game_over:
            print(f"\n{Fore.RED}GAME OVER{Style.RESET_ALL}")

def show_instructions():
    """Display game instructions."""
    print(f"{Fore.CYAN}INSTRUCTIONS:{Style.RESET_ALL}")
    print(f"{Fore.WHITE}Tetris is a tile-matching puzzle game where you arrange")
    print(f"falling tetrominoes to create complete horizontal lines.{Style.RESET_ALL}")
    print()
    print(f"{Fore.WHITE}Controls:")
    print(f" - Left/Right Arrows: Move the tetromino horizontally")
    print(f" - Down Arrow: Accelerate the tetromino's descent")
    print(f" - Up Arrow: Rotate the tetromino clockwise")
    print(f" - Space: Drop the tetromino instantly")
    print(f" - P: Pause/Resume the game")
    print(f" - Q: Quit the game{Style.RESET_ALL}")
    print()
    print(f"{Fore.WHITE}Scoring:")
    print(f" - 1 line: 100 points × level")
    print(f" - 2 lines: 300 points × level")
    print(f" - 3 lines: 500 points × level")
    print(f" - 4 lines: 800 points × level{Style.RESET_ALL}")
    print()
    print(f"{Fore.WHITE}The game speeds up as you advance in levels,")
    print(f"with each level requiring 10 cleared lines.{Style.RESET_ALL}")
    print()
    input(f"{Fore.GREEN}Press Enter to start the game...{Style.RESET_ALL}")

def main():
    """Main game function."""
    clear_screen()
    print_header()
    show_instructions()
    
    while True:
        clear_screen()
        print_header()
        
        # Choose difficulty (affects starting level and speed)
        print(f"{Fore.CYAN}Choose difficulty:{Style.RESET_ALL}")
        print(f"1. Easy (slower drop speed)")
        print(f"2. Medium (moderate drop speed)")
        print(f"3. Hard (faster drop speed)")
        print()
        
        while True:
            try:
                choice = int(input(f"{Fore.YELLOW}Enter your choice (1-3): {Style.RESET_ALL}"))
                if 1 <= choice <= 3:
                    break
                else:
                    print(f"{Fore.RED}Please enter a number between 1 and 3.{Style.RESET_ALL}")
            except ValueError:
                print(f"{Fore.RED}Please enter a valid number.{Style.RESET_ALL}")
        
        # Set difficulty parameters
        if choice == 1:  # Easy
            starting_level = 1
            base_speed = 1.0  # Seconds per drop
        elif choice == 2:  # Medium
            starting_level = 3
            base_speed = 0.8
        else:  # Hard
            starting_level = 5
            base_speed = 0.6
        
        # Initialize game
        game = Tetris()
        game.level = starting_level
        game.new_piece()
        
        last_drop_time = time.time()
        frame_time = 0.05  # Seconds per frame (for rendering)
        
        # Game loop
        try:
            while not game.game_over:
                clear_screen()
                print_header()
                game.draw()
                
                # Handle input
                if is_key_pressed():
                    key = get_key()
                    if key == 'q':
                        raise KeyboardInterrupt
                    
                    if not game.paused:
                        if key == 'a' or key == '\x1b[D':  # Left arrow
                            game.move_left()
                        elif key == 'd' or key == '\x1b[C':  # Right arrow
                            game.move_right()
                        elif key == 's' or key == '\x1b[B':  # Down arrow
                            game.move_down()
                        elif key == 'w' or key == '\x1b[A':  # Up arrow
                            game.rotate_piece()
                        elif key == ' ':  # Space
                            game.drop()
                            last_drop_time = time.time()  # Reset drop timer after hard drop
                    
                    if key == 'p':  # Toggle pause
                        game.paused = not game.paused
                
                # Automatic piece drop based on level
                if not game.paused and not game.game_over:
                    drop_speed = base_speed * (0.8 ** (game.level - 1))  # Speed increases with level
                    if time.time() - last_drop_time > drop_speed:
                        game.move_down()
                        last_drop_time = time.time()
                
                time.sleep(frame_time)
            
            # Game over
            clear_screen()
            print_header()
            game.draw()
            print(f"{Fore.RED}Game Over!{Style.RESET_ALL}")
            print(f"{Fore.GREEN}Final Score: {game.score}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}Level Reached: {game.level}{Style.RESET_ALL}")
            print(f"{Fore.GREEN}Lines Cleared: {game.lines_cleared}{Style.RESET_ALL}")
            
            print()
            play_again = input(f"{Fore.CYAN}Play again? (y/n): {Style.RESET_ALL}").lower()
            if play_again != 'y':
                break
        
        except KeyboardInterrupt:
            clear_screen()
            print_header()
            print(f"{Fore.GREEN}Game aborted.{Style.RESET_ALL}")
            time.sleep(1)
            break
    
    clear_screen()
    print_header()
    print(f"{Fore.GREEN}Thanks for playing Tetris!{Style.RESET_ALL}")
    time.sleep(1.5)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        clear_screen()
        print_header()
        print(f"{Fore.GREEN}Thanks for playing Tetris!{Style.RESET_ALL}")
        sys.exit(0) 